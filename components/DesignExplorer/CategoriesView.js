import React, { useState } from 'react';

import { FilterBrowser } from './FilterBrowser';
import { Column, fitStyle, Row, CenterMiddle, flexAutoStyle, flexGrowShrinkStyle, flexAutoHeightStyle, Middle } from '../Layout';
import { observer } from 'mobx-react';
import { iconSize, panelBorderTopStyle, panelPaddingStyle, panelStyle, transparentLightBlue } from '../Style';
import { Chip, IconButton } from '../Widgets';
import { icons } from '../Icons';
import { SelectCategoryDialog } from './SelectCategoryDialog';

export const CategoriesView = observer(function({style, designSelection}) {
  const [addFilterDialogOpen, setAddFilterDialogOpen] = useState(false);

  const selectedDesigns = Object.values(designSelection.items);

  const categoryInfos = {}
  selectedDesigns.forEach(design => {
    for (let categoryId in design.categories) {
      if (typeof(categoryInfos[categoryId]) === "undefined") {
        const designCategoryInfo = design.categories[categoryId];
        categoryInfos[categoryId] = {
          category: designCategoryInfo.category,
          designsIncluded: "all",
          categorizedBy: "possiblyUser"
        }
      }
    }
  });

  for (let categoryId in categoryInfos) {
    const categoryInfo = categoryInfos[categoryId];
    selectedDesigns.forEach(design => {
      if (!design.in(categoryInfo.category)) {
        categoryInfo.designsIncluded = "some";
      }
      if (design.categories[categoryId] && design.categories[categoryId].rule) {
        categoryInfo.categorizedBy="possiblyUserAndRule";
      }
    });
  }

  const nonAvailable = {};
  for (let categoryId in categoryInfos) {
    const categoryInfo = categoryInfos[categoryId];
    if (categoryInfo.designsIncluded === "all") {
      nonAvailable[categoryInfo.category.id] = categoryInfo.category.id;
    }
  }

  function removeCategory(category) {
    selectedDesigns.forEach(design => {
      design.uncategorize(category);
    });
  }

  const children = Object.values(categoryInfos).map(categoryInfo => 
    <CategoryInfoView 
      key={categoryInfo.category.id} 
      style={flexAutoStyle}
      removeCategory={removeCategory} 
      categoryInfo={categoryInfo}/>)

  if (selectedDesigns.length > 0) {
    children.push(
      <Middle key="add" style={{height: 25, marginLeft: "0.5em"}}>
        <IconButton style={flexAutoStyle} image={icons.plus} size={15}
        onClick={() => {
          setAddFilterDialogOpen(true);
        }}/>
      </Middle>
    )
    children.push(
      <SelectCategoryDialog key="dialog" open={addFilterDialogOpen} close={() => setAddFilterDialogOpen(false)} 
        allowCreate={true}
        nonAvailable={nonAvailable}
        onSelect={(category) => {
          setAddFilterDialogOpen(false);
          selectedDesigns.forEach(design => {
            design.categorize(category);
          });
        }}
      />
    )
  }

  return (
    <Row 
      style={{...panelBorderTopStyle, alignItems:"flex-start", alignContent: "flex-start", ...panelPaddingStyle, flexWrap: "wrap" , ...style}} 
      children={children}/>
  )
})

function CategoryInfoView({style, categoryInfo, removeCategory}) {
  const autoGenerated = categoryInfo.categorizedBy !== "possiblyUser";
  style = {opacity: categoryInfo.designsIncluded === "all" ? 1 : 0.4,...style};
  if (autoGenerated) style.backgroundColor = transparentLightBlue(0.1);
  return <Chip 
    style={style}
    text={categoryInfo.category.name} 
    onDelete={autoGenerated ? null : (() => removeCategory(categoryInfo.category))}/>
}

